from typing import overload

EOS: PyCapsule
GO_ON: PyCapsule
STOP: None
__version__: str

class ff_minode:
    def __init__(self) -> None: ...
    def eosnotify(self, arg0: int) -> None: ...
    def ff_send_out(self, task: object, id: int = ..., retry: int = ..., ticks: int = ...) -> bool: ...
    def fromInput(self) -> bool: ...
    def get_channel_id(self) -> int: ...
    def svc(self, arg0: object) -> object: ...
    def svc_end(self) -> None: ...
    def svc_init(self) -> int: ...

class ff_monode:
    def __init__(self) -> None: ...
    def eosnotify(self, arg0: int) -> None: ...
    def ff_send_out(self, task: object, id: int = ..., retry: int = ..., ticks: int = ...) -> bool: ...
    def ff_send_out_to(self, task: object, id: int, retry: int = ..., ticks: int = ...) -> bool: ...
    def get_channel_id(self) -> int: ...
    def svc(self, arg0: object) -> object: ...
    def svc_end(self) -> None: ...
    def svc_init(self) -> int: ...

class ff_node:
    def __init__(self) -> None: ...
    def ff_send_out(self, task: object, id: int = ..., retry: int = ..., ticks: int = ...) -> bool: ...
    def svc(self, arg0: object) -> object: ...
    def svc_end(self) -> None: ...
    def svc_init(self) -> int: ...

class ff_pipeline:
    def __init__(self) -> None: ...
    @overload
    def add_stage(self, s: py_ff_node, cleanup: bool = ...) -> int: ...
    @overload
    def add_stage(self, s: ff_pipeline, cleanup: bool = ...) -> int: ...
    @overload
    def add_stage(self, s: py_ff_minode, cleanup: bool = ...) -> int: ...
    @overload
    def add_stage(self, s: py_ff_monode, cleanup: bool = ...) -> int: ...
    def ffTime(self) -> float: ...
    def run_and_wait_end(self) -> int: ...
    def wrap_around(self) -> int: ...
